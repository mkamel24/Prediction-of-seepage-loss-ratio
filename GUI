import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import numpy as np
import os
import joblib  # Use joblib if the model was saved using joblib

def setup_gui():
    root = tk.Tk()
    root.title("Prediction of Seepage Loss Ratio")
    canvas = tk.Canvas(root, width=850, height=580, background='#FFFFFF')
    canvas.pack()

    # Load the image
    image_path = os.path.expanduser("~/Desktop/CANAL.jpg")
    try:
        image = Image.open(image_path)
        root.canal_image = ImageTk.PhotoImage(image)
        canvas.create_image(450, 20, image=root.canal_image, anchor="n")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load image: {e}")
        root.destroy()
        return

    # Function to create labels on the canvas
    def create_label(text, font, fg, bg, x, y):
        label = tk.Label(root, text=text, font=font, fg=fg, bg=bg)
        canvas.create_window(x, y, anchor="w", window=label)
        return label

    # Check if the model file exists and load it
    model_path_catb = os.path.expanduser("~/Desktop/CatBoost.joblib")
    if not os.path.exists(model_path_catb):
        messagebox.showerror("Error", "CatBoost model file not found.")
        root.destroy()
        return
    
    try:
        model_catb = joblib.load(model_path_catb)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load model: {e}")
        root.destroy()
        return

    # GUI elements definition
    label_inputdefinetitle = create_label('Definition of Parameters', ('Palatino Linotype', 16, 'bold', 'italic'), '#000000', '#FFFFFF', 50, 250)

    param_labels = [
        'X1: Canal bed width to water depth (b* = b/y)',
        'X2: Canal side slope (z)',
        'X3: Liner to soil hydraulic conductivity (k* = kL/k)',
        'X4: Liner thickness to water depth (t*= tL/y)',
    ]
    for i, text in enumerate(param_labels, start=1):
        create_label(text, ('Georgia', 14, 'italic'), '#00008B', '#FFFFFF', 50, 250 + i*30)

    label_inputs = create_label('Inputs', ('Palatino Linotype', 16, 'bold', 'italic'), '#000000', '#FFFFFF', 600, 250)

    entry_fields = ['X1', 'X2', 'X3', 'X4']
    entries = {}
    for i, field in enumerate(entry_fields, start=1):
        label = create_label(f'{field}: ', ('Georgia', 14), '#FF0000', '#FFFFFF', 600, 250 + i*30)
        entry = tk.Entry(root)
        canvas.create_window(750, 250 + i*30, window=entry)
        entries[field] = entry

    label_output = create_label('Output:', ('Palatino Linotype', 16, 'bold', 'italic'), '#000000', '#FFFFFF', 250, 450)
    label_result = create_label('Seepage loss ratio (q*)', ('Georgia', 16, 'italic'), '#FF0000', '#FFFFFF', 350, 450)

    # Predict button command function
    def predict():
        try:
            input_values = [float(entries[field].get()) for field in entry_fields]
            if any(val <= 0 for val in input_values):
                raise ValueError("All values must be positive.")
            input_data = np.array([input_values])
            prediction = model_catb.predict(input_data)
            label_result['text'] = f'q* = {prediction[0]:.4f}'
        except ValueError as e:
            messagebox.showerror("Error", f"Invalid input: {e}")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred during prediction: {e}")

    predict_button = tk.Button(root, text='Calculate', font=('Georgia', 12), command=predict, fg='#FFFFFF', bg='green')
    canvas.create_window(650, 450, window=predict_button)

    label_developer = create_label('Developed by: Eng. Mohamed K. Elshaarawy & Eng. Nanes H. Elmasry', ('Amasis MT Pro Medium', 12, 'bold'), '#000000', '#e9ecef', 50, 520)
    label_institution = create_label('Civil Engineering Deptartment, Faculty of Engineering, Horus University-Egypt, New Damietta 34517, Egypt', ('Amasis MT Pro Medium', 12), '#0000FF', '#FFFFFF', 50, 550)

    root.mainloop()

if __name__ == "__main__":
    setup_gui()
